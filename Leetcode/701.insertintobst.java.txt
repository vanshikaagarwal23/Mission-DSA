/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        // If the tree is empty, create a new node and return it as root
        if (root == null) return new TreeNode(val);

        TreeNode cur = root;

        // Traverse the BST to find the correct insertion point
        while (true) {
            if (cur.val <= val) {
                // Go to the right subtree if current node value is less than or equal to val
                if (cur.right != null) {
                    cur = cur.right; // Move right
                } else {
                    // Found the insertion point
                    cur.right = new TreeNode(val);
                    break;
                }
            } else {
                // Go to the left subtree if current node value is greater than val
                if (cur.left != null) {
                    cur = cur.left; // Move left
                } else {
                    // Found the insertion point
                    cur.left = new TreeNode(val);
                    break;
                }
            }
        }

        return root; // Return the unchanged root node
    }
}

